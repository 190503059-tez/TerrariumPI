{
  "swagger": "2.0",
  "info": {
    "description": "Here you can find all the API calls and models that are available in TerrariumPI. More information can be found at https://theyosh.github.io/TerrariumPI/",
    "version": "1.0.0",
    "title": "TerrariumPI REST API",
    "contact": {
      "email": "terrariumpi@theyosh.nl"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "Area",
      "description": "Enclosure areas"
    },
    {
      "name": "Audio",
      "description": "Audio files"
    },
    {
      "name": "Button",
      "description": "Buttons, motion detectors and light sensors"
    },
    {
      "name": "Calendar",
      "description": "Calendar calls"
    },
    {
      "name": "Enclosure",
      "description": "Enclosures"
    },
    {
      "name": "Playlist",
      "description": "Playlists with audio files"
    },
    {
      "name": "Relay",
      "description": "Relays"
    },
    {
      "name": "Sensor",
      "description": "Sensors"
    },
    {
      "name": "Webcam",
      "description": "Webcams"
    },
    {
      "name": "System",
      "description": "System and general calls"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/areas/types/": {
      "get": {
        "tags": [
          "Area"
        ],
        "summary": "Get available area types",
        "description": "Get all the available area types with supported sensor types.",
        "operationId": "getAreaTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Zero or more area types with supported sensor types.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AreaType"
              }
            }
          }
        }
      }
    },
    "/areas/": {
      "get": {
        "tags": [
          "Area"
        ],
        "summary": "Get existing areas",
        "description": "Get all the existing areas in a list.",
        "operationId": "getAreas",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Zero or more areas",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Area"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Area"
        ],
        "summary": "Add a new area to an enclosure",
        "description": "Add a new area to an enclosure. The enclosure needs to be existing",
        "operationId": "addArea",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created area object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Area"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A new created area",
            "schema": {
              "$ref": "#/definitions/Area"
            }
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/areas/{id}/": {
      "get": {
        "tags": [
          "Area"
        ],
        "summary": "Get a specific area",
        "description": "Get a specific area selected by id",
        "operationId": "getArea",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of area to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested area",
            "schema": {
              "$ref": "#/definitions/Area"
            }
          },
          "404": {
            "description": "Area does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "put": {
        "tags": [
          "Area"
        ],
        "summary": "Update an existing area with new data",
        "description": "Update an existing area with new data. The enclosure needs to be existing",
        "operationId": "updateArea",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of area to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update the values that need to be changed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Area"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated area",
            "schema": {
              "$ref": "#/definitions/Area"
            }
          },
          "404": {
            "description": "Area does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Area"
        ],
        "summary": "Delete an existing area",
        "description": "Delete an existing area",
        "operationId": "deleteArea",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of area to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfull"
          },
          "404": {
            "description": "Area does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/audio/hardware/": {
      "get": {
        "tags": [
          "Audio"
        ],
        "summary": "Get a list of supported soundcards",
        "description": "Get all the supported soundcards",
        "operationId": "getAudioHardware",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of supported soundcards",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudioHardware"
              }
            }
          }
        }
      }
    },
    "/audio/files/": {
      "get": {
        "tags": [
          "Audio"
        ],
        "summary": "Get a list of existing audio files",
        "description": "Get all the existing audio files",
        "operationId": "getAudioFiles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Zero or more audio files",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudioFile"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Audio"
        ],
        "summary": "Upload a new audio file",
        "description": "Upload a new audio file",
        "operationId": "postAudioFile",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "audiofiles",
            "description": "The uploaded audio file",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audio file is uploaded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudioFile"
              }
            }
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/audio/files/{file}": {
      "get": {
        "tags": [
          "Audio"
        ],
        "summary": "Get an existing audio file",
        "description": "Get an existing audio file based on ID",
        "operationId": "getAudioFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "path",
            "description": "ID of audio file",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested audio file",
            "schema": {
              "$ref": "#/definitions/AudioFile"
            }
          },
          "404": {
            "description": "Audio file does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Audio"
        ],
        "summary": "Delete an existing audio file",
        "description": "Delete an existing audio file",
        "operationId": "delAudioFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "path",
            "description": "ID of audio file",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested audio file is deleted"
          },
          "404": {
            "description": "Audio file does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/buttons/hardware/": {
      "get": {
        "tags": [
          "Button"
        ],
        "summary": "Get a list of supported buttons",
        "description": "Get all the supported buttons",
        "operationId": "getButtonsHardware",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of supported hardware",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ButtonHardware"
              }
            }
          }
        }
      }
    },
    "/buttons/": {
      "get": {
        "tags": [
          "Button"
        ],
        "summary": "Get a list of existing buttons",
        "description": "Get all the existing buttons",
        "operationId": "getButtons",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Zero or more buttons",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Button"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Button"
        ],
        "summary": "Add a new button",
        "description": "Add a new button",
        "operationId": "addButton",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created button object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Button"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A new created button",
            "schema": {
              "$ref": "#/definitions/Button"
            }
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/buttons/{id}/": {
      "get": {
        "tags": [
          "Button"
        ],
        "summary": "Get a specific button",
        "description": "Get a specific button selected by id",
        "operationId": "getButton",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of button to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested button",
            "schema": {
              "$ref": "#/definitions/Button"
            }
          },
          "404": {
            "description": "Button does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "put": {
        "tags": [
          "Button"
        ],
        "summary": "Update an existing button with new data",
        "description": "Update an existing button with new data.",
        "operationId": "updateButton",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of button to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update the values that need to be changed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Button"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated button",
            "schema": {
              "$ref": "#/definitions/Button"
            }
          },
          "404": {
            "description": "Button does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Button"
        ],
        "summary": "Delete an existing button",
        "description": "Delete an existing button",
        "operationId": "deleteButton",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of button to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfull"
          },
          "404": {
            "description": "Button does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/buttons/{id}/history/": {
      "get": {
        "tags": [
          "Button"
        ],
        "summary": "Get the history for a specific button for a period of 1 day",
        "description": "Get the history for a specific button for a period of 1 day",
        "operationId": "getButtonHistory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of button for which to get the history",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Button history for 1 day",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ButtonHistory"
              }
            }
          },
          "404": {
            "description": "Button does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/buttons/{id}/history/{period}/": {
      "get": {
        "tags": [
          "Button"
        ],
        "summary": "Get the history for a specific button for a period",
        "description": "Get the history for a specific button for a period",
        "operationId": "getButtonHistoryPeriod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of button to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "period",
            "in": "path",
            "description": "Period",
            "required": true,
            "type": "string",
            "enum": [
              "day",
              "week",
              "month",
              "year"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Button history for {period}",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ButtonHistory"
              }
            }
          },
          "404": {
            "description": "Button does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/calendar/": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Get existing calendars",
        "description": "Get all the existing calendars in a list.",
        "operationId": "getCalendars",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date and time for calendar items",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "end",
            "description": "End date and time for calendar items",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Zero or more calendars",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Calendar"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Calendar"
        ],
        "summary": "Add a new calendar event",
        "description": "Add a new calendar event",
        "operationId": "addCalendar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created calendar object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Calendar"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A new created calendar",
            "schema": {
              "$ref": "#/definitions/Calendar"
            }
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/calendar/{id}/": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Get a specific calendar",
        "description": "Get a specific calendar selected by id",
        "operationId": "getCalendar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of calendar to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested calendar",
            "schema": {
              "$ref": "#/definitions/Calendar"
            }
          },
          "404": {
            "description": "Calendar does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "put": {
        "tags": [
          "Calendar"
        ],
        "summary": "Update an existing calendar with new data",
        "description": "Update an existing calendar with new data. The enclosure needs to be existing",
        "operationId": "updateCalendar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of calendar to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update the values that need to be changed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Calendar"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated calendar",
            "schema": {
              "$ref": "#/definitions/Calendar"
            }
          },
          "404": {
            "description": "Calendar does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Calendar"
        ],
        "summary": "Delete an existing calendar",
        "description": "Delete an existing calendar",
        "operationId": "deleteCalendar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of calendar to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfull"
          },
          "404": {
            "description": "Calendar does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/calendar/download/": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Download iCal",
        "description": "Download iCal",
        "operationId": "downloadCalendar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The calendar in iCal format"
          },
          "404": {
            "description": "Calendar does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/enclosures/": {
      "get": {
        "tags": [
          "Enclosure"
        ],
        "summary": "Get a list of existing enclosures",
        "description": "Get all the existing enclosures",
        "operationId": "getEnclosures",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Zero or more enclosures",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Enclosure"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Enclosure"
        ],
        "summary": "Add a new enclosure",
        "description": "Add a new enclosure",
        "operationId": "addEnclosure",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created enclosure object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Enclosure"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A new created enclosure",
            "schema": {
              "$ref": "#/definitions/Enclosure"
            }
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/enclosures/{id}/": {
      "get": {
        "tags": [
          "Enclosure"
        ],
        "summary": "Get a specific enclosure",
        "description": "Get a specific enclosure selected by id",
        "operationId": "getEnclosure",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of enclosure to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested enclosure",
            "schema": {
              "$ref": "#/definitions/Enclosure"
            }
          },
          "404": {
            "description": "Enclosure does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "put": {
        "tags": [
          "Enclosure"
        ],
        "summary": "Update an existing enclosure with new data",
        "description": "Update an existing enclosure with new data.",
        "operationId": "updateEnclosure",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of enclosure to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update the values that need to be changed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Enclosure"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated enclosure",
            "schema": {
              "$ref": "#/definitions/Enclosure"
            }
          },
          "404": {
            "description": "Enclosure does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Enclosure"
        ],
        "summary": "Delete an existing enclosure",
        "description": "Delete an existing enclosure",
        "operationId": "deleteEnclosure",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of enclosure to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfull"
          },
          "404": {
            "description": "Enclosure does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/logfile/download/": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Download the logfile",
        "description": "Download the logfile",
        "operationId": "downloadLogfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the logfile in plain text"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/playlists/": {
      "get": {
        "tags": [
          "Playlist"
        ],
        "summary": "Get a list of existing playlists",
        "description": "Get all the existing playlists",
        "operationId": "getPlaylists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Zero or more playlists",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Playlist"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Playlist"
        ],
        "summary": "Add a new playlist",
        "description": "Add a new playlist",
        "operationId": "addPlaylist",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created playlist object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A new created playlist",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/playlists/{id}/": {
      "get": {
        "tags": [
          "Playlist"
        ],
        "summary": "Get a specific playlist",
        "description": "Get a specific playlist selected by id",
        "operationId": "getPlaylist",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of playlist to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested playlist",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "404": {
            "description": "Playlist does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "put": {
        "tags": [
          "Playlist"
        ],
        "summary": "Update an existing playlist with new data",
        "description": "Update an existing playlist with new data.",
        "operationId": "updatePlaylist",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of playlist to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update the values that need to be changed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated playlist",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "404": {
            "description": "Playlist does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Playlist"
        ],
        "summary": "Delete an existing playlist",
        "description": "Delete an existing playlist",
        "operationId": "deletePlaylist",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of playlist to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfull"
          },
          "404": {
            "description": "Playlist does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/restart/": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Restart TerrariumPI",
        "description": "Restart TerrariumPI",
        "operationId": "restartPi",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Restarts the software",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/reboot/": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Reboot TerrariumPI",
        "description": "Reboot TerrariumPI",
        "operationId": "rebootPi",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Reboot TerrariumPI",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/shutdown/": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Shutdown TerrariumPI",
        "description": "Shutdown TerrariumPI",
        "operationId": "shutdownPi",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Shutdown TerrariumPI",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/relays/hardware/": {
      "get": {
        "tags": [
          "Relay"
        ],
        "summary": "Get a list of supported relays",
        "description": "Get all the supported relays",
        "operationId": "getRelaysHardware",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of supported hardware",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelayHardware"
              }
            }
          }
        }
      }
    },
    "/relays/scan/": {
      "post": {
        "tags": [
          "Relay"
        ],
        "summary": "Scan for new relays",
        "description": "Scan for new relays",
        "operationId": "scanRelays",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Found zero or more new relays",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/relays/": {
      "get": {
        "tags": [
          "Relay"
        ],
        "summary": "Get a list of existing relays",
        "description": "Get all the existing relays",
        "operationId": "getRelays",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Zero or more relays",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Relay"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Relay"
        ],
        "summary": "Add a new relay",
        "description": "Add a new relay",
        "operationId": "addRelay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created relay object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Relay"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A new created relay",
            "schema": {
              "$ref": "#/definitions/Relay"
            }
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/relays/{id}/": {
      "get": {
        "tags": [
          "Relay"
        ],
        "summary": "Get a specific relay",
        "description": "Get a specific relay selected by id",
        "operationId": "getRelay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of relay to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relay",
            "schema": {
              "$ref": "#/definitions/Relay"
            }
          },
          "404": {
            "description": "Relay does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "put": {
        "tags": [
          "Relay"
        ],
        "summary": "Update an existing relay with new data",
        "description": "Update an existing relay with new data.",
        "operationId": "updateRelay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of relay to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update the values that need to be changed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Relay"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated relay",
            "schema": {
              "$ref": "#/definitions/Relay"
            }
          },
          "404": {
            "description": "Relay does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Relay"
        ],
        "summary": "Delete an existing relay",
        "description": "Delete an existing relay",
        "operationId": "deleteRelay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of relay to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfull"
          },
          "404": {
            "description": "Relay does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/relays/{id}/history/": {
      "get": {
        "tags": [
          "Relay"
        ],
        "summary": "Get the history for a specific relay for a period of 1 day",
        "description": "Get the history for a specific relay for a period of 1 day",
        "operationId": "getRelayHistory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of relay for which to get the history",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Relay history for 1 day",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelayHistory"
              }
            }
          },
          "404": {
            "description": "Relay does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/relays/{id}/history/{period}/": {
      "get": {
        "tags": [
          "Relay"
        ],
        "summary": "Get the history for a specific relay for a period",
        "description": "Get the history for a specific relay for a period",
        "operationId": "getRelayHistoryPeriod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of relay to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "period",
            "in": "path",
            "description": "Period",
            "required": true,
            "type": "string",
            "enum": [
              "day",
              "week",
              "month",
              "year"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Relay history for {period}",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelayHistory"
              }
            }
          },
          "404": {
            "description": "Relay does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/sensors/hardware/": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a list of supported sensors",
        "description": "Get all the supported sensors",
        "operationId": "getSensorsHardware",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of supported hardware",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SensorHardware"
              }
            }
          }
        }
      }
    },
    "/sensors/": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a list of existing sensors",
        "description": "Get all the existing sensors",
        "operationId": "getSensors",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Zero or more sensors",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sensor"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Add a new sensor",
        "description": "Add a new sensor",
        "operationId": "addSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created sensor object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A new created sensor",
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/sensors/{id}/": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a specific sensor",
        "description": "Get a specific sensor selected by id",
        "operationId": "getSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of sensor to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested sensor",
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          "404": {
            "description": "Sensor does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      },
      "put": {
        "tags": [
          "Sensor"
        ],
        "summary": "Update an existing sensor with new data",
        "description": "Update an existing sensor with new data.",
        "operationId": "updateSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of sensor to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update the values that need to be changed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated sensor",
            "schema": {
              "$ref": "#/definitions/Sensor"
            }
          },
          "404": {
            "description": "Sensor does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sensor"
        ],
        "summary": "Delete an existing sensor",
        "description": "Delete an existing sensor",
        "operationId": "deleteSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of sensor to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfull"
          },
          "404": {
            "description": "Sensor does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/sensors/{id}/history/": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get the history for a specific sensor for a period of 1 day",
        "description": "Get the history for a specific sensor for a period of 1 day",
        "operationId": "getSensorHistory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of sensor for which to get the history",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Sensor history for 1 day",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SensorHistory"
              }
            }
          },
          "404": {
            "description": "Sensor does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    },
    "/sensors/{id}/history/{period}/": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get the history for a specific sensor for a period",
        "description": "Get the history for a specific sensor for a period",
        "operationId": "getSensorHistoryPeriod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of sensor to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "period",
            "in": "path",
            "description": "Period",
            "required": true,
            "type": "string",
            "enum": [
              "day",
              "week",
              "month",
              "year"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Sensor history for {period}",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SensorHistory"
              }
            }
          },
          "404": {
            "description": "Sensor does not exists"
          },
          "500": {
            "description": "Unexpected server error"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Basic": {
      "type": "basic",
      "description": "Basic HTTP authentication. Default user is \"admin\". You can change this in the settings."
    }
  },
  "definitions": {
    "AreaType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "sensors": {
          "type": "array",
          "readOnly": true,
          "items": {
            "allOf": [
              {
                "type": "string"
              }
            ]
          }
        }
      }
    },
    "Area": {
      "type": "object",
      "required": [
        "enclosure",
        "name",
        "type",
        "mode",
        "setup"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "enclosure": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Area type"
        },
        "mode": {
          "type": "string",
          "description": "Operating mode"
        },
        "setup": {
          "type": "string",
          "default": "{}"
        },
        "state": {
          "type": "string",
          "default": "{}",
          "readOnly": true
        }
      }
    },
    "AudioHardware": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AudioFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "duration": {
          "type": "number",
          "readOnly": true
        },
        "filesize": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "Button": {
      "type": "object",
      "required": [
        "name",
        "hardware",
        "address"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "hardware": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "calibration": {
          "format": "string",
          "default": "{}"
        },
        "value": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ButtonHardware": {
      "type": "object",
      "properties": {
        "hardware": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ButtonHistory": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "readOnly": true
        },
        "value": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "Calendar": {
      "type": "object",
      "required": [
        "summary",
        "dtstart"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "dtstart": {
          "type": "string",
          "format": "date",
          "default": 0
        },
        "dtend": {
          "type": "string",
          "default": 0,
          "format": "date"
        },
        "all_day": {
          "type": "boolean",
          "default": false
        },
        "freq": {
          "type": "string",
          "enum": [
            "daily",
            "weekly",
            "monthly",
            "yearly"
          ]
        },
        "interval": {
          "type": "integer"
        },
        "repeatend": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Enclosure": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string",
          "description": "Enclosure image"
        },
        "areas": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/Area"
              },
              {
                "type": "object"
              }
            ]
          }
        },
        "doors": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/Button"
              },
              {
                "type": "object"
              }
            ]
          }
        },
        "webcams": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/Webcam"
              },
              {
                "type": "object"
              }
            ]
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Holds the return message from the server",
          "default": "Action succeeded"
        }
      }
    },
    "Playlist": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "volume": {
          "type": "string"
        },
        "shuffle": {
          "type": "string"
        },
        "repeat": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/AudioFile"
              },
              {
                "type": "object"
              }
            ]
          }
        }
      }
    },
    "Relay": {
      "type": "object",
      "required": [
        "name",
        "hardware",
        "address"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "hardware": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "wattage": {
          "type": "number",
          "default": 0
        },
        "flow": {
          "type": "number",
          "default": 0
        },
        "manual_mode": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "replacement": {
          "type": "string",
          "format": "date-time",
          "default": "1970-01-01 00:00:00",
          "readOnly": true
        },
        "calibration": {
          "format": "string",
          "default": "{}"
        },
        "value": {
          "type": "number",
          "readOnly": true
        },
        "dimmer": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "RelayHardware": {
      "type": "object",
      "properties": {
        "hardware": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RelayHistory": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "readOnly": true
        },
        "value": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "Sensor": {
      "type": "object",
      "required": [
        "name",
        "hardware",
        "type",
        "address",
        "exclude_avg"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "hardware": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "limit_min": {
          "type": "number",
          "default": 0
        },
        "limit_max": {
          "type": "number",
          "default": 100
        },
        "alarm_min": {
          "type": "number",
          "default": 0
        },
        "alarm_max": {
          "type": "number",
          "default": 100
        },
        "max_diff": {
          "type": "number",
          "default": 0
        },
        "exclude_avg": {
          "type": "boolean"
        },
        "calibration": {
          "format": "string",
          "default": "{}"
        },
        "value": {
          "type": "number",
          "readOnly": true
        },
        "alarm": {
          "type": "boolean",
          "readOnly": true
        },
        "error": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "SensorHardware": {
      "type": "object",
      "properties": {
        "hardware": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "types": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "type": "string"
              }
            ]
          },
          "readOnly": true
        }
      }
    },
    "SensorHistory": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "readOnly": true
        },
        "value": {
          "type": "number",
          "readOnly": true
        },
        "alarm_min": {
          "type": "number",
          "readOnly": true
        },
        "alarm_max": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "Setting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Webcam": {
      "type": "object",
      "required": [
        "hardware",
        "name",
        "address",
        "width",
        "height",
        "rotation",
        "awb"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "hardware": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "width": {
          "type": "integer"
        },
        "height": {
          "type": "integer"
        },
        "rotation": {
          "type": "string"
        },
        "awb": {
          "type": "string"
        },
        "is_live": {
          "type": "boolean",
          "readOnly": true
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about TerrariumPI",
    "url": "https://theyosh.github.io/TerrariumPI/"
  }
}